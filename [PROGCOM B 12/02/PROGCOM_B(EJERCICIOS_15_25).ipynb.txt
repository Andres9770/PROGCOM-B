{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que valide si tres números pueden formar un triángulo y de qué tipo es.***"
      ],
      "metadata": {
        "id": "1zsCfyfG-Ban"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ye1VIReJ9-pt",
        "outputId": "77d4a515-d0ee-4ee6-edec-6e9de70dd590"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa la longitud del lado 1: 5\n",
            "Ingresa la longitud del lado 2: 4\n",
            "Ingresa la longitud del lado 3: 2\n",
            "Triángulo escaleno\n"
          ]
        }
      ],
      "source": [
        "def tipo_triangulo(lados):\n",
        "  if not isinstance(lados, list) or len(lados) != 3:\n",
        "    return \"Error: Ingresa una lista de tres números.\"\n",
        "  a, b, c = lados\n",
        "  if not all(isinstance(lado, (int, float)) and lado > 0 for lado in lados):\n",
        "      return \"Error: Los lados del triangulo deben ser números positivos.\"\n",
        "  if a + b <= c or a + c <= b or b + c <= a:\n",
        "    return \"Los números ingresados no pueden formar un triángulo.\"\n",
        "  elif a == b == c:\n",
        "    return \"Triángulo equilátero\"\n",
        "  elif a == b or a == c or b == c:\n",
        "    return \"Triángulo isósceles\"\n",
        "  else:\n",
        "    return \"Triángulo escaleno\"\n",
        "lados_triangulo = []\n",
        "for i in range(3):\n",
        "    while True:\n",
        "        try:\n",
        "            lado = float(input(f\"Ingresa la longitud del lado {i+1}: \"))\n",
        "            if lado > 0:\n",
        "                lados_triangulo.append(lado)\n",
        "                break\n",
        "            else:\n",
        "                print(\"Error: La longitud del lado debe ser un número positivo.\")\n",
        "        except ValueError:\n",
        "            print(\"Error: Ingresa un valor numérico válido.\")\n",
        "print(tipo_triangulo(lados_triangulo))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Crea un programa que muestre la tabla de multiplicar de un número hasta el 10.***"
      ],
      "metadata": {
        "id": "9ucVvMMZ_8oK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def tabla_multiplicar(numero):\n",
        "  if not isinstance(numero, (int, float)):\n",
        "    print(\"Error: Ingresa un número válido.\")\n",
        "    return\n",
        "  tabla = [numero * i for i in range(1, 11)]\n",
        "  print(f\"Tabla de multiplicar del {numero}:\")\n",
        "  for i, resultado in enumerate(tabla):\n",
        "    print(f\"{numero} x {i+1} = {resultado}\")\n",
        "numero = int(input(\"Ingresa un número para mostrar su tabla de multiplicar: \"))\n",
        "tabla_multiplicar(numero)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OFgWlTcOAMqo",
        "outputId": "1c6b6783-86c2-48a8-e7a2-3cdfda6acbe9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa un número para mostrar su tabla de multiplicar: 2\n",
            "Tabla de multiplicar del 2:\n",
            "2 x 1 = 2\n",
            "2 x 2 = 4\n",
            "2 x 3 = 6\n",
            "2 x 4 = 8\n",
            "2 x 5 = 10\n",
            "2 x 6 = 12\n",
            "2 x 7 = 14\n",
            "2 x 8 = 16\n",
            "2 x 9 = 18\n",
            "2 x 10 = 20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Escribe un programa que calcule la suma de números naturales hasta n.***\n"
      ],
      "metadata": {
        "id": "b_peSj8QAnPK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def suma_naturales(n):\n",
        "  if not isinstance(n, int) or n < 0:\n",
        "    return \"Error: Ingresa un número entero positivo.\"\n",
        "  numeros = list(range(1, n + 1))\n",
        "  suma = sum(numeros)\n",
        "  return suma\n",
        "n = int(input(\"Ingresa un número entero positivo: \"))\n",
        "print(f\"La suma de los números naturales hasta {n} es: {suma_naturales(n)}\")\n"
      ],
      "metadata": {
        "id": "flqa_95dA8YQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que calcule el factorial de un número. Recuerda que el factorial de 0 es 1 y no existen factoriales negativos.***"
      ],
      "metadata": {
        "id": "WP0L7yYXChJU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def factorial(n):\n",
        "    if not isinstance(n, int):\n",
        "        return \"Error: Ingresa un número entero.\"\n",
        "    if n < 0:\n",
        "        return \"Error: No existen factoriales de números negativos.\"\n",
        "    elif n == 0:\n",
        "        return 1\n",
        "    else:\n",
        "        numeros = list(range(1, n + 1))\n",
        "        factorial = 1\n",
        "        for numero in numeros:\n",
        "            factorial *= numero\n",
        "        return factorial\n",
        "\n",
        "numero = int(input(\"Ingresa un número entero no negativo: \"))\n",
        "print(f\"El factorial de {numero} es: {factorial(numero)}\")\n"
      ],
      "metadata": {
        "id": "poGxRKfkCtxs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Crea un programa que muestre los primeros n números de la serie Fibonacci.***"
      ],
      "metadata": {
        "id": "jLA63GSXC_l7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def fibonacci(n):\n",
        "  if not isinstance(n, int) or n <= 0:\n",
        "    return \"Error: Ingresa un número entero positivo.\"\n",
        "\n",
        "  lista_fibonacci = []\n",
        "  a, b = 0, 1\n",
        "  for _ in range(n):\n",
        "    lista_fibonacci.append(a)\n",
        "    a, b = b, a + b\n",
        "  return lista_fibonacci\n",
        "n = int(input(\"Ingresa la cantidad de números de Fibonacci a mostrar: \"))\n",
        "print(fibonacci(n))\n"
      ],
      "metadata": {
        "id": "XJR9Prn6DJYk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Escribe un programa que adivine entre un conjunto de diez colores definidos por el usuario, con un máximo de 10 intentos.***\n"
      ],
      "metadata": {
        "id": "5iahDxGiD9Ky"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "def adivina_color():\n",
        "    colores = []\n",
        "    for i in range(10):\n",
        "        while True:\n",
        "            color = input(f\"Ingresa el color {i+1}: \")\n",
        "            if color not in colores and color.strip() != \"\":\n",
        "                colores.append(color)\n",
        "                break\n",
        "            elif color in colores:\n",
        "                print(\"Ese color ya ha sido ingresado. Intenta con otro.\")\n",
        "            else:\n",
        "                print(\"Ingresa un color válido (no vacío).\")\n",
        "    color_secreto = random.choice(colores)\n",
        "    intentos = 0\n",
        "    while intentos < 10:\n",
        "        intentos += 1\n",
        "        adivinanza = input(f\"Intento {intentos}: Adivina el color: \")\n",
        "        if adivinanza.lower() == color_secreto.lower():\n",
        "            print(f\"¡Correcto! El color secreto era {color_secreto}. Lo adivinaste en {intentos} intentos.\")\n",
        "            return\n",
        "        else:\n",
        "            print(\"Incorrecto. Intenta de nuevo.\")\n",
        "    print(f\"Agotaste tus intentos. El color secreto era {color_secreto}.\")\n",
        "\n",
        "adivina_color()"
      ],
      "metadata": {
        "id": "rpQSS7Y9ELtR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que muestre los números pares del 1 al 100.***"
      ],
      "metadata": {
        "id": "pYrUMJJqE1w5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pares = [numero for numero in range(2, 101, 2)]\n",
        "print(*pares)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "r9HNmsCxFAYP",
        "outputId": "251f207c-7c8d-443c-9239-adffa16e4dd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Crea un programa que calcule la suma de los dígitos de un número.***"
      ],
      "metadata": {
        "id": "TAJmBS8UGhGe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def suma_digitos(numero):\n",
        "    if not isinstance(numero, int) or numero < 0:\n",
        "        return\n",
        "\n",
        "    digitos = [int(digito) for digito in str(numero)]\n",
        "    suma = sum(digitos)\n",
        "    return suma\n",
        "\n",
        "numero = int(input(\"Ingresa un número entero no negativo: \"))\n",
        "print(f\"La suma de los dígitos de {numero} es: {suma_digitos(numero)}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eqJNg5QXGsz1",
        "outputId": "a5244bf6-de6d-42d4-ab64-5d9ed1ad36ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa un número entero no negativo: 34\n",
            "La suma de los dígitos de 34 es: 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Escribe un programa que determine si un número es primo.***"
      ],
      "metadata": {
        "id": "ouEgERtJHBF0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def es_primo(numero):\n",
        "    if not isinstance(numero, int) or numero <= 1:\n",
        "        return\n",
        "    if numero <= 3:\n",
        "        return True\n",
        "    if numero % 2 == 0 or numero % 3 == 0:\n",
        "        return False\n",
        "    i = 5\n",
        "    while i * i <= numero:\n",
        "        if numero % i == 0 or numero % (i + 2) == 0:\n",
        "            return False\n",
        "        i += 6\n",
        "    return True\n",
        "numero = int(input(\"Ingresa un número entero: \"))\n",
        "if es_primo(numero):\n",
        "    print(f\"{numero} es un número primo.\")\n",
        "else:\n",
        "    print(f\"{numero} no es un número primo.\")"
      ],
      "metadata": {
        "id": "rfUDOxuCHQOO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que muestre el patrón de un triángulo con asteriscos.***"
      ],
      "metadata": {
        "id": "W-qk_W-2H2lM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def triangulo_asteriscos(n):\n",
        "    for i in range(1, n + 1):\n",
        "        print(\"*\" * i)\n",
        "\n",
        "filas = int(input(\"Ingresa el número de filas para el triángulo: \"))\n",
        "triangulo_asteriscos(filas)\n"
      ],
      "metadata": {
        "id": "b2zf4kgwH9ty"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Crea un programa que calcule la potencia de un número sin usar el operador **"
      ],
      "metadata": {
        "id": "N5hrNb2PIjZa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def potencia(base, exponente):\n",
        "    if not isinstance(base, (int, float)) or not isinstance(exponente, int):\n",
        "        return\n",
        "    if exponente < 0:\n",
        "        return\n",
        "    resultado = 1\n",
        "    for _ in range(exponente):\n",
        "        resultado *= base\n",
        "    return resultado\n",
        "\n",
        "base = float(input(\"Ingresa la base: \"))\n",
        "exponente = int(input(\"Ingresa el exponente: \"))\n",
        "print(f\"{base} elevado a la {exponente} es igual a: {potencia(base, exponente)}\")\n"
      ],
      "metadata": {
        "id": "OeqwOhvtIvbi"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}