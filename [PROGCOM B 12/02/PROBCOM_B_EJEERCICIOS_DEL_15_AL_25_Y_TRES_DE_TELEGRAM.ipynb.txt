{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que valide si tres números pueden formar un triángulo y de qué tipo es.***"
      ],
      "metadata": {
        "id": "oXaTVLVgfnRn"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ags6d1Mmd0aw",
        "outputId": "8a4304da-c775-412e-aa86-ae1844737645"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce la longitud del lado a: 2\n",
            "Introduce la longitud del lado b: 3\n",
            "Introduce la longitud del lado c: 4\n",
            "El triángulo es Escaleno.\n",
            "Lados: a=2.0, b=3.0, c=4.0\n"
          ]
        }
      ],
      "source": [
        "def tipo_triangulo(a, b, c):\n",
        "\n",
        "  lados = {\"a\": a, \"b\": b, \"c\": c}\n",
        "  if not (a + b > c and a + c > b and b + c > a):\n",
        "      return {\"valido\": False, \"mensaje\": \"No se puede formar un triángulo con estos lados.\"}\n",
        "  if a == b == c:\n",
        "    tipo = \"Equilátero\"\n",
        "  elif a == b or a == c or b == c:\n",
        "    tipo = \"Isósceles\"\n",
        "  else:\n",
        "    tipo = \"Escaleno\"\n",
        "  if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n",
        "      tipo += \" y Rectángulo\"\n",
        "\n",
        "  return {\"valido\": True, \"tipo\": tipo, \"lados\": lados}\n",
        "\n",
        "lado_a = float(input(\"Introduce la longitud del lado a: \"))\n",
        "lado_b = float(input(\"Introduce la longitud del lado b: \"))\n",
        "lado_c = float(input(\"Introduce la longitud del lado c: \"))\n",
        "resultado = tipo_triangulo(lado_a, lado_b, lado_c)\n",
        "if resultado[\"valido\"]:\n",
        "  print(f\"El triángulo es {resultado['tipo']}.\")\n",
        "  print(f\"Lados: a={resultado['lados']['a']}, b={resultado['lados']['b']}, c={resultado['lados']['c']}\")\n",
        "else:\n",
        "    print(resultado[\"mensaje\"])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Crea un programa que muestre la tabla de multiplicar de un número hasta el 10.***\n"
      ],
      "metadata": {
        "id": "LoEk_s4NfsaG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def tabla_multiplicar(numero):\n",
        "  tabla = {}\n",
        "  for i in range(1, 11):\n",
        "    tabla[i] = numero * i\n",
        "  return tabla\n",
        "numero = int(input(\"Introduce un número para mostrar su tabla de multiplicar: \"))\n",
        "tabla = tabla_multiplicar(numero)\n",
        "print(f\"Tabla de multiplicar del {numero}:\")\n",
        "for i, resultado in tabla.items():\n",
        "    print(f\"{numero} x {i} = {resultado}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uPliQgknfwv-",
        "outputId": "aa400c8c-6113-43a6-d24a-44c0d74380dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce un número para mostrar su tabla de multiplicar: 2\n",
            "Tabla de multiplicar del 2:\n",
            "2 x 1 = 2\n",
            "2 x 2 = 4\n",
            "2 x 3 = 6\n",
            "2 x 4 = 8\n",
            "2 x 5 = 10\n",
            "2 x 6 = 12\n",
            "2 x 7 = 14\n",
            "2 x 8 = 16\n",
            "2 x 9 = 18\n",
            "2 x 10 = 20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Escribe un programa que calcule la suma de números naturales hasta n.***"
      ],
      "metadata": {
        "id": "a1tc_81bgw3l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def suma_naturales(n):\n",
        "  suma = 0\n",
        "  numeros = {}\n",
        "  for i in range(1, n + 1):\n",
        "    suma += i\n",
        "    numeros[i] = i\n",
        "\n",
        "  return {\"suma\": suma, \"numeros\": numeros}\n",
        "\n",
        "n = int(input(\"Introduce un número entero positivo: \"))\n",
        "resultado = suma_naturales(n)\n",
        "print(f\"La suma de los números naturales hasta {n} es: {resultado['suma']}\")\n",
        "print(f\"Números utilizados en la suma: {resultado['numeros']}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EL30WPlQg4IV",
        "outputId": "1fd6965b-dc29-4cb6-dc3e-96c2391e86bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce un número entero positivo: 4\n",
            "La suma de los números naturales hasta 4 es: 10\n",
            "Números utilizados en la suma: {1: 1, 2: 2, 3: 3, 4: 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que calcule el factorial de un número. Recuerda que el factorial de 0 es 1 y no existen factoriales negativos.***"
      ],
      "metadata": {
        "id": "jDtmLGtzhd0A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def factorial(n):\n",
        "  if n < 0:\n",
        "    return \"No existe factorial de números negativos.\"\n",
        "  elif n == 0:\n",
        "    return 1\n",
        "  else:\n",
        "    fact = 1\n",
        "\n",
        "    factoriales_calculados = {}\n",
        "\n",
        "    for i in range(1, n + 1):\n",
        "      fact *= i\n",
        "      factoriales_calculados[i] = fact\n",
        "\n",
        "    return fact\n",
        "\n",
        "numero = int(input(\"Introduce un número entero no negativo: \"))\n",
        "resultado = factorial(numero)\n",
        "print(f\"El factorial de {numero} es: {resultado}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SL8-LnzihkTM",
        "outputId": "b7985e1c-9acc-46b2-d7bb-1385bb33c0fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce un número entero no negativo: 5\n",
            "El factorial de 5 es: 120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Crea un programa que muestre los primeros n números de la serie Fibonacci.***"
      ],
      "metadata": {
        "id": "1AihTkj7h1Cv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def fibonacci(n):\n",
        "  fib_sequence = {}\n",
        "  a, b = 0, 1\n",
        "  for i in range(n):\n",
        "    fib_sequence[i] = a\n",
        "    a, b = b, a + b\n",
        "  return fib_sequence\n",
        "n = int(input(\"Introduce el número de términos de la serie Fibonacci que deseas mostrar: \"))\n",
        "secuencia = fibonacci(n)\n",
        "for i in secuencia:\n",
        "  print(secuencia[i], end=\" \")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H2znbiAth7LE",
        "outputId": "80db9418-75f1-482d-dafb-728ab8d9f648"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce el número de términos de la serie Fibonacci que deseas mostrar: 4\n",
            "0 1 1 2 "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Escribe un programa que adivine entre un conjunto de diez colores definidos por el usuario, con un máximo de 10 intentos.***"
      ],
      "metadata": {
        "id": "zV1C2tcyjTGD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Escribe un programa que adivine entre un conjunto de diez colores definidos por el usuario, con un máximo de 10 intentos. usando diccionarios con imput señalame donde usas el diccionario si elje algo que no sea un color dime que no es valido\n",
        "\n",
        "import random\n",
        "\n",
        "def adivina_color():\n",
        "    colores = {}\n",
        "    for i in range(10):\n",
        "        while True:\n",
        "            color = input(f\"Introduce el color número {i+1}: \")\n",
        "            if color not in colores and color.isalpha():  # Verifica si el color es válido y no está repetido\n",
        "                colores[color] = 0 # Se agrega un valor 0, se usa la key del color\n",
        "                break\n",
        "            else:\n",
        "                print(\"Color no válido o repetido. Intenta de nuevo.\")\n",
        "\n",
        "    color_secreto = random.choice(list(colores.keys())) # Se escoge un color aleatorio\n",
        "    intentos = 0\n",
        "    adivinado = False\n",
        "\n",
        "    print(\"\\n¡Adivina el color secreto!\")\n",
        "\n",
        "    while intentos < 10 and not adivinado:\n",
        "        intento = input(f\"Intento {intentos + 1}: \")\n",
        "        intentos += 1\n",
        "\n",
        "        if intento in colores: # Se verifica si es un color valido\n",
        "          if intento.lower() == color_secreto.lower():\n",
        "              adivinado = True\n",
        "              print(f\"¡Correcto! El color secreto era {color_secreto}. Adivinaste en {intentos} intentos.\")\n",
        "          else:\n",
        "              print(\"Incorrecto. Intenta de nuevo.\")\n",
        "        else:\n",
        "          print(\"Ese no es un color válido.\")\n",
        "\n",
        "    if not adivinado:\n",
        "        print(f\"No adivinaste el color secreto. Era {color_secreto}.\")\n",
        "\n",
        "adivina_color()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "collapsed": true,
        "id": "MX-wkANBjWNi",
        "outputId": "4f109b7a-3be7-45f2-9e3f-13df177e592b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce el color número 1: 1\n",
            "Color no válido o repetido. Intenta de nuevo.\n",
            "Introduce el color número 1: verde\n",
            "Introduce el color número 2: rojo\n",
            "Introduce el color número 3: rojo\n",
            "Color no válido o repetido. Intenta de nuevo.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-2f4387f8a236>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"No adivinaste el color secreto. Era {color_secreto}.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m \u001b[0madivina_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-12-2f4387f8a236>\u001b[0m in \u001b[0;36madivina_color\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m             \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Introduce el color número {i+1}: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcolores\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misalpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Verifica si el color es válido y no está repetido\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m                 \u001b[0mcolores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;31m# Se agrega un valor 0, se usa la key del color\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1175\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que muestre los números pares del 1 al 100.***\n"
      ],
      "metadata": {
        "id": "wVNqlMiAkTfJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def even_numbers():\n",
        "  even_dict = {}\n",
        "  for i in range(2, 101, 2):\n",
        "    even_dict[i] = i\n",
        "  print(\"Números pares del 1 al 100:\")\n",
        "  for key, value in even_dict.items():\n",
        "    print(value, end=\" \")\n",
        "even_numbers()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kUoVngV6kWqc",
        "outputId": "14f5b84c-ba07-4eb3-f425-37a1a6bb15b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Números pares del 1 al 100:\n",
            "2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Crea un programa que calcule la suma de los dígitos de un número.***"
      ],
      "metadata": {
        "id": "gydGXtPAk3ch"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sum_digits(number):\n",
        "\n",
        "  if not isinstance(number, int):\n",
        "    return\n",
        "  digit_values = {}\n",
        "  number_str = str(abs(number))\n",
        "  digit_sum = 0\n",
        "  for digit in number_str:\n",
        "    digit_sum += int(digit)\n",
        "    digit_values[digit] = int(digit)\n",
        "  return digit_sum, digit_values\n",
        "number = 12345\n",
        "digit_sum, digit_values = sum_digits(number)\n",
        "\n",
        "print(f\"The sum of the digits of {number} is: {digit_sum}\")\n",
        "print(f\"Digit values: {digit_values}\")\n",
        "number = -12345\n",
        "digit_sum, digit_values = sum_digits(number)\n",
        "print(f\"The sum of the digits of {number} is: {digit_sum}\")\n",
        "print(f\"Digit values: {digit_values}\")\n",
        "number = 12.5\n",
        "result = sum_digits(number)\n",
        "print(f\"Result: {result}\")\n"
      ],
      "metadata": {
        "id": "-TtXugM5k9q5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Escribe un programa que determine si un número es primo.***"
      ],
      "metadata": {
        "id": "rCamMn6HlVzV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def es_primo(numero):\n",
        "  primos_encontrados = {}\n",
        "  if numero <= 1:\n",
        "    return {\"es_primo\": False, \"primos_encontrados\": primos_encontrados}\n",
        "  for i in range(2, int(numero**0.5) + 1):\n",
        "    if numero % i == 0:\n",
        "      return {\"es_primo\": False, \"primos_encontrados\": primos_encontrados}\n",
        "    else:\n",
        "      if i not in primos_encontrados:\n",
        "          primos_encontrados[i] = i\n",
        "  primos_encontrados[numero] = numero\n",
        "  return {\"es_primo\": True, \"primos_encontrados\": primos_encontrados}\n",
        "\n",
        "numero = int(input(\"Introduce un número entero positivo: \"))\n",
        "resultado = es_primo(numero)\n",
        "\n",
        "if resultado[\"es_primo\"]:\n",
        "    print(f\"{numero} es un número primo.\")\n",
        "    print(\"Números primos encontrados:\", resultado[\"primos_encontrados\"])\n",
        "else:\n",
        "    print(f\"{numero} no es un número primo.\")\n",
        "    print(\"Números primos encontrados:\", resultado[\"primos_encontrados\"])\n"
      ],
      "metadata": {
        "id": "oQc-NXy0lbsa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Desarrolla un programa que muestre el patrón de un triángulo con asteriscos.***"
      ],
      "metadata": {
        "id": "lTPCdX7ClocI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def triangle_pattern(rows):\n",
        "    for i in range(1, rows + 1):\n",
        "        spaces = \" \" * (rows - i)\n",
        "        stars = \"*\" * (2 * i - 1)\n",
        "        print(spaces + stars)\n",
        "\n",
        "rows = int(input(\"Enter the number of rows for the triangle: \"))\n",
        "triangle_pattern(rows)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ySehyZEglr2R",
        "outputId": "436cf50a-4949-49c1-a1d9-4e9731f1fb3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of rows for the triangle: 4\n",
            "   *\n",
            "  ***\n",
            " *****\n",
            "*******\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Crea un programa que calcule la potencia de un número sin usar el operador **."
      ],
      "metadata": {
        "id": "YeJw_raBnVUf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def potencia(base, exponente):\n",
        "  if exponente == 0:\n",
        "    return 1\n",
        "  elif exponente < 0:\n",
        "    return 1 / potencia(base, -exponente)\n",
        "  else:\n",
        "    resultado = 1\n",
        "    for _ in range(exponente):\n",
        "      resultado *= base\n",
        "    return resultado\n",
        "\n",
        "base = float(input(\"Introduce la base: \"))\n",
        "exponente = int(input(\"Introduce el exponente: \"))\n",
        "resultado = potencia(base, exponente)\n",
        "print(f\"{base} elevado a {exponente} es igual a {resultado}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DmOlKZzVnbII",
        "outputId": "386bfb09-3ea0-44a4-84f0-bbdd22595a14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce la base: 2\n",
            "Introduce el exponente: 4\n",
            "2.0 elevado a 4 es igual a 16.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*** ejercios telegram***"
      ],
      "metadata": {
        "id": "X-zvVonVnpdS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*** todos los numeros divisibles por 6 del 1 al 60***"
      ],
      "metadata": {
        "id": "K4xmWeC8nsoZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def divisibles_por_seis():\n",
        "\n",
        "  divisibles = {}\n",
        "  for i in range(1, 61):\n",
        "    if i % 6 == 0:\n",
        "      divisibles[i] = i\n",
        "  return divisibles\n",
        "numeros_divisibles = divisibles_por_seis()\n",
        "numeros_divisibles"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iH26bpIBn9K2",
        "outputId": "7a9d2464-9b93-4e33-abf1-3de6bc7a37a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{6: 6, 12: 12, 18: 18, 24: 24, 30: 30, 36: 36, 42: 42, 48: 48, 54: 54, 60: 60}"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***todos los nombre que empiecen por a en una lista de nombres***"
      ],
      "metadata": {
        "id": "h9k2yez8oHft"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def nombres_con_a(lista_nombres):\n",
        "    nombres_a = []\n",
        "    for nombre in lista_nombres:\n",
        "        if nombre.startswith(\"A\") or nombre.startswith(\"a\"):\n",
        "            nombres_a.append(nombre)\n",
        "    return nombres_a\n",
        "nombres = [\"Ana\", \"Pedro\", \"Alberto\", \"andres\", \"Antonio\", \"Alicia\"]\n",
        "nombres_que_empiezan_con_a = nombres_con_a(nombres)\n",
        "nombres_que_empiezan_con_a\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g8xLGJFaoGQV",
        "outputId": "2ccf7636-f369-4a77-85a7-d7f890d1e344"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Ana', 'Alberto', 'andres', 'Antonio', 'Alicia']"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***todos los numeros primos entre 0 y 70***"
      ],
      "metadata": {
        "id": "YUD0lgE5ooi1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def primos_hasta_70():\n",
        "    primos = {}\n",
        "    for num in range(2, 71):\n",
        "        es_primo = True\n",
        "        for i in range(2, int(num**0.5) + 1):\n",
        "            if num % i == 0:\n",
        "                es_primo = False\n",
        "                break\n",
        "        if es_primo:\n",
        "            primos[num] = num\n",
        "    return primos\n",
        "primos = primos_hasta_70()\n",
        "print(*primos.keys())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VHqN6HVXoxD9",
        "outputId": "f3462b1c-09b5-4f47-f6fd-e398cfb3db57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67\n"
          ]
        }
      ]
    }
  ]
}