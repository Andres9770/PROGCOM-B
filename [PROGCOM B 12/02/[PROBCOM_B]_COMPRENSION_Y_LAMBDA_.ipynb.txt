{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que adivine entre un conjunto de diez colores definidos por el usuario (máximo 10 intentos)**"
      ],
      "metadata": {
        "id": "2E9bpuOgn6Bj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# comprensión\n",
        "colores = [input(f\"Color {i+1}: \") for i in range(10)]\n",
        "adivinanza = input(\"Piensa en uno de esos colores e ingresa 'listo': \")\n",
        "if adivinanza.lower() == \"listo\":\n",
        "    intentos = 0\n",
        "    while intentos < 10:\n",
        "        intento = input(\"Ingresa tu suposición de color: \")\n",
        "        if intento in colores:\n",
        "            print(f\"¡Adivinaste! El color {intento} estaba en la lista.\")\n",
        "            break\n",
        "        else:\n",
        "            intentos += 1\n",
        "            print(f\"Intento {intentos}/10. No está en la lista, intenta de nuevo.\")\n",
        "    if intentos == 10:\n",
        "        print(\"Se acabaron los intentos.\")"
      ],
      "metadata": {
        "id": "pFeKFPusn7mz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "colores = [input(f\"Color {i+1}: \") for i in range(10)]\n",
        "verificar = lambda x: x in colores\n",
        "adivinanza = input(\"Piensa en uno e ingresa 'listo': \")\n",
        "if adivinanza.lower() == \"listo\":\n",
        "    intentos = 0\n",
        "    while intentos < 10:\n",
        "        intento = input(\"Ingresa tu suposición: \")\n",
        "        if verificar(intento):\n",
        "            print(f\"¡Adivinaste! {intento} está en la lista.\")\n",
        "            break\n",
        "        intentos += 1\n",
        "        print(f\"Intento {intentos}/10.\")\n",
        "    if intentos == 10:\n",
        "        print(\"Se acabaron los intentos.\")"
      ],
      "metadata": {
        "id": "Zm9LqtkpoCzL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que muestre los números pares del 1 al 100**"
      ],
      "metadata": {
        "id": "DzKqK_9koWz7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# comprensión\n",
        "pares = [num for num in range(1, 101) if num % 2 == 0]\n",
        "print(*pares)"
      ],
      "metadata": {
        "id": "4vdVaBvGonKk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "es_par = lambda x: x % 2 == 0\n",
        "pares = list(filter(es_par, range(1, 101)))\n",
        "print(*pares)"
      ],
      "metadata": {
        "id": "30BVdkPOpAmR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que calcule la suma de los dígitos de un número**"
      ],
      "metadata": {
        "id": "EQITOwmXpExJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# compresión\n",
        "numero = int(input(\"Ingresa un número: \"))\n",
        "suma = sum([int(digito) for digito in str(numero)])\n",
        "print(f\"La suma de los dígitos es: {suma}\")"
      ],
      "metadata": {
        "id": "sSB4SmvvpIKy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numero = int(input(\"Ingresa un número: \"))\n",
        "suma_digitos = lambda x: sum(int(d) for d in str(x))\n",
        "print(f\"La suma de los dígitos es: {suma_digitos(numero)}\")"
      ],
      "metadata": {
        "id": "cAAF-5MppQqi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que determine si un número es primo**"
      ],
      "metadata": {
        "id": "Kn23nDTYpTsp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# comprensión\n",
        "numero = int(input(\"Ingresa un número: \"))\n",
        "divisores = [i for i in range(2, int(numero ** 0.5) + 1) if numero % i == 0]\n",
        "es_primo = numero >= 2 and len(divisores) == 0\n",
        "print(f\"{numero} {'es' if es_primo else 'no es'} primo.\")"
      ],
      "metadata": {
        "id": "NG7Fd-0spYWp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "numero = int(input(\"Ingresa un número: \"))\n",
        "es_divisor = lambda x, y: x % y == 0\n",
        "divisores = list(filter(lambda x: es_divisor(numero, x), range(2, int(numero ** 0.5) + 1)))\n",
        "es_primo = numero >= 2 and len(divisores) == 0\n",
        "print(f\"{numero} {'es' if es_primo else 'no es'} primo.\")"
      ],
      "metadata": {
        "id": "nLzDH5M8papJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que muestre el patrón de un triángulo con asteriscos**"
      ],
      "metadata": {
        "id": "pYPNTdMep-A7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# comprensión\n",
        "n = 5\n",
        "lineas = [\" \" * (n - i - 1) + \"*\" * (2 * i + 1) for i in range(n)]\n",
        "print(\"\\n\".join(lineas))"
      ],
      "metadata": {
        "id": "1iVjQNVfqCeI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "n = 5\n",
        "generar_linea = lambda i: \" \" * (n - i - 1) + \"*\" * (2 * i + 1)\n",
        "lineas = [generar_linea(i) for i in range(n)]\n",
        "print(\"\\n\".join(lineas))"
      ],
      "metadata": {
        "id": "z6r3g1XqqPcT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Programa que calcule la potencia de un número sin usar ***"
      ],
      "metadata": {
        "id": "xcoSvCRdqfSY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# cromprensión\n",
        "base = int(input(\"Ingresa la base: \"))\n",
        "exponente = int(input(\"Ingresa el exponente: \"))\n",
        "resultado = [base for _ in range(exponente)]\n",
        "total = 1\n",
        "for x in resultado:\n",
        "    total *= x\n",
        "print(f\"{base} elevado a {exponente} es: {total}\")"
      ],
      "metadata": {
        "id": "JqSNaZXUqhcJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "base = int(input(\"Ingresa la base: \"))\n",
        "exponente = int(input(\"Ingresa el exponente: \"))\n",
        "multiplicar = lambda x, y: x * y\n",
        "resultado = base\n",
        "for _ in range(exponente - 1):\n",
        "    resultado = multiplicar(resultado, base)\n",
        "print(f\"{base} elevado a {exponente} es: {resultado if exponente > 0 else 1}\")"
      ],
      "metadata": {
        "id": "9SE-vLQLq8qD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que muestre todas las tablas de multiplicar del 1 al 10**"
      ],
      "metadata": {
        "id": "46l6WErwrPY3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# compresión\n",
        "def tablas_multiplicar():\n",
        "    tablas = [f\"{i} x {j} = {i * j}\" for i in range(1, 11) for j in range(1, 11)]\n",
        "    print(\"\\n\".join(tablas))\n",
        "\n",
        "tablas_multiplicar()"
      ],
      "metadata": {
        "id": "4YZAMeaWr3If"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "def tablas_multiplicar():\n",
        "    multiplicar = lambda x, y: x * y\n",
        "    tablas = [f\"{i} x {j} = {multiplicar(i, j)}\" for i in range(1, 11) for j in range(1, 11)]\n",
        "    print(\"\\n\".join(tablas))\n",
        "\n",
        "tablas_multiplicar()"
      ],
      "metadata": {
        "id": "6pYjCCTsr-73"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que encuentre todos los números perfectos hasta n**"
      ],
      "metadata": {
        "id": "UWtQHUFcsIm3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# cromprensión\n",
        "def es_perfecto(num):\n",
        "    return num == sum([i for i in range(1, num) if num % i == 0])\n",
        "\n",
        "def numeros_perfectos(n):\n",
        "    perfectos = [i for i in range(1, n + 1) if es_perfecto(i)]\n",
        "    print(f\"Números perfectos hasta {n}: {perfectos}\")\n",
        "\n",
        "n = int(input(\"Ingresa un número n: \"))\n",
        "numeros_perfectos(n)"
      ],
      "metadata": {
        "id": "7pVtJmyrsP-n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "def es_perfecto(num):\n",
        "    es_divisor = lambda x, y: x % y == 0\n",
        "    return num == sum(filter(lambda x: es_divisor(num, x), range(1, num)))\n",
        "\n",
        "def numeros_perfectos(n):\n",
        "    perfectos = [i for i in range(1, n + 1) if es_perfecto(i)]\n",
        "    print(f\"Números perfectos hasta {n}: {perfectos}\")\n",
        "\n",
        "n = int(input(\"Ingresa un número n: \"))\n",
        "numeros_perfectos(n)"
      ],
      "metadata": {
        "id": "NSBU3nFasXMG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que genere un patrón de diamante con asteriscos**"
      ],
      "metadata": {
        "id": "caR_Nu3HskVO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# compresión\n",
        "def diamante(n):\n",
        "    superior = [\" \" * (n - i - 1) + \"*\" * (2 * i + 1) for i in range(n)]\n",
        "    inferior = [\" \" * (n - i - 1) + \"*\" * (2 * i + 1) for i in range(n - 2, -1, -1)]\n",
        "    print(\"\\n\".join(superior + inferior))\n",
        "\n",
        "n = 4\n",
        "diamante(n)"
      ],
      "metadata": {
        "id": "1SaI0z4HsnlA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "def diamante(n):\n",
        "    generar_linea = lambda i: \" \" * (n - i - 1) + \"*\" * (2 * i + 1)\n",
        "    superior = [generar_linea(i) for i in range(n)]\n",
        "    inferior = [generar_linea(i) for i in range(n - 2, -1, -1)]\n",
        "    print(\"\\n\".join(superior + inferior))\n",
        "\n",
        "n = 4\n",
        "diamante(n)"
      ],
      "metadata": {
        "id": "GUgM48Lgs0c_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**rograma que encuentre todos los números Armstrong hasta n**"
      ],
      "metadata": {
        "id": "d9hjNvV3s7U2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# comprensión\n",
        "def es_armstrong(num):\n",
        "    return num == sum([int(d) ** len(str(num)) for d in str(num)])\n",
        "\n",
        "def numeros_armstrong(n):\n",
        "    armstrong = [i for i in range(1, n + 1) if es_armstrong(i)]\n",
        "    print(f\"Números Armstrong hasta {n}: {armstrong}\")\n",
        "\n",
        "n = int(input(\"Ingresa un número n: \"))\n",
        "numeros_armstrong(n)"
      ],
      "metadata": {
        "id": "6WHmS9dwtHyG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "def es_armstrong(num):\n",
        "    potencia = lambda x, y: x ** y\n",
        "    return num == sum(map(lambda d: potencia(int(d), len(str(num))), str(num)))\n",
        "\n",
        "def numeros_armstrong(n):\n",
        "    armstrong = [i for i in range(1, n + 1) if es_armstrong(i)]\n",
        "    print(f\"Números Armstrong hasta {n}: {armstrong}\")\n",
        "\n",
        "n = int(input(\"Ingresa un número n: \"))\n",
        "numeros_armstrong(n)"
      ],
      "metadata": {
        "id": "bxnq-JbMtlJ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Programa que simule un reloj digital**"
      ],
      "metadata": {
        "id": "ZhHf89PUtt09"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# cromprensión\n",
        "def reloj_digital(segundos_totales):\n",
        "    tiempos = [f\"{t // 3600:02d}:{(t % 3600) // 60:02d}:{t % 60:02d}\" for t in range(segundos_totales + 1)]\n",
        "    print(\"\\n\".join(tiempos))\n",
        "\n",
        "segundos = 10\n",
        "reloj_digital(segundos)"
      ],
      "metadata": {
        "id": "R6OVTXqut5i9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lambda\n",
        "def reloj_digital(segundos_totales):\n",
        "    formato = lambda t: f\"{t // 3600:02d}:{(t % 3600) // 60:02d}:{t % 60:02d}\"\n",
        "    tiempos = [formato(t) for t in range(segundos_totales + 1)]\n",
        "    print(\"\\n\".join(tiempos))\n",
        "\n",
        "segundos = 10\n",
        "reloj_digital(segundos)"
      ],
      "metadata": {
        "id": "-0woS-k0uGt1"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}